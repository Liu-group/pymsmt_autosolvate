"""
This module is written for generate the pre-frcmod file for the metal site.
"""
from __future__ import absolute_import
from pymsmtmol.readpdb import get_atominfo_fpdb
from pymsmtmol.cal import calc_bond
from pymsmtmol.getlist import get_all_list, get_mc_blist
from pymsmtlib.lib import get_lib_dict, get_parm_dict
from pymsmtmol.element import Mass, CoRadiiDict, get_ionljparadict
import os

def addspace(atomtype):
    if len(atomtype) == 1:
      atomtype = atomtype + ' '
    return atomtype

    #--------------------------------------------------------------------------

def gene_pre_frcmod_file(ionids, naamol2f, stpdbf, stfpf, prefcdf, ffchoice,
                         gaff, frcmodfs, watermodel):

    print "******************************************************************"
    print "*                                                                *"
    print "*===================Generate the Initial frcmod file=============*"
    print "*                                                                *"
    print "******************************************************************"
 
    libdict = {}
    chargedict = {}

    for mol2f in naamol2f:
      libdict1, chargedict1 = get_lib_dict(mol2f)
      libdict.update(libdict1)
      chargedict.update(chargedict1)

    #get the parameter dicts
    Params = get_parm_dict(ffchoice, gaff, frcmodfs)

    massparms = Params.mass
    bondparms = Params.bond
    angparms = Params.ang
    dihparms = Params.dih
    impparms = Params.imp
    nbparms = Params.nb

    #--------------------------------------------------------------------------

    #############Get the metal center information####################

    #--------------------------------------------------------------------------

    mol, atids, resids = get_atominfo_fpdb(stpdbf)

    #get the blist
    blist = get_mc_blist(mol, atids, ionids, stfpf)

    #get_all_the_lists
    all_list = get_all_list(mol, blist, atids, 10.0)

    #atom type dictionary, key is the atom id, value is atom type
    attypdict = {}

    #atom ids which has been transfered to another atom type
    atidtrans = []

    #get the information for the three from finger print
    fp = open(stfpf, 'r')
    for line in fp:
      if line[0:4] != "LINK":
        atinfo, atid, attyp1st, symbol, attyp2nd = line.split()
        atid = int(atid)
        attyp1st = addspace(attyp1st)
        attyp2nd = addspace(attyp2nd)
        attypdict[atid] = (attyp1st, attyp2nd)
        if attyp1st != attyp2nd:
          atidtrans.append(atid)
    fp.close()

    print "Atoms which has changed the atom types:", atidtrans

    for atid in atidtrans:
      resid = mol.atoms[atid].resid
      resname = mol.residues[resid].resname
      attyp1 = attypdict[atid][0]
      attyp2 = attypdict[atid][1]
      print str(resid) + '-' + resname + '@' + str(atid) + '-' + \
            mol.atoms[atid].atname + ' : ' + attyp1, '-->', attyp2

    #-------------------------------------------------------------------------

    ########Print the pre-generated frcmod files##############

    #-------------------------------------------------------------------------

    fmf = open(prefcdf, 'w')

    #for atoms which changed atom types
    print >> fmf, 'REMARK GOES HERE, THIS FILE IS GENERATED BY MCPB.PY'
    print >> fmf, 'MASS'
    for atid in atidtrans:
      if atid not in ionids: #not include metal ion
        atyp1 = attypdict[atid][0]
        atyp2 = attypdict[atid][1]
        print >> fmf, 'YES', atyp2 + massparms[atyp1]

    #for metal ions
    for i in ionids:
      attyp = attypdict[i][1]
      atname = mol.atoms[i].atname
      if len(atname) > 1:
        atname = atname[0] + atname[1:].lower()
      massi = Mass[atname]
      print >> fmf, 'YES', attyp + ' '  + str(round(massi, 2))  + \
                    '                              ' + atname + ' ion'

    #--------------------------------------------------------------------------
    bondparamsdict1 = {} #For metal ions
    bondparamsdict2 = {} #For the others

    print >> fmf, ' '
    print >> fmf, 'BOND'

    #for bond
    for bonds in all_list.bondlist:
      i = bonds[0]
      j = bonds[1]
      if list(set(ionids) & set(bonds)) != []:
        #The bonds which related to the ions
        bondtyp2 = (attypdict[i][1], attypdict[j][1])
        if (bondtyp2 not in bondparamsdict1.keys()) and (bondtyp2[::-1] \
            not in bondparamsdict1.keys()):
          bondparamsdict1[bondtyp2] = ' '
      elif list(set(atidtrans) & set(bonds)) != []:
        #The bonds related to the atoms which changed their atom types
        bondtyp1 = (attypdict[i][0], attypdict[j][0])
        bondtyp2 = (attypdict[i][1], attypdict[j][1])
        if (bondtyp2 not in bondparamsdict2.keys()) and (bondtyp2[::-1] \
            not in bondparamsdict2.keys()):
          if bondtyp1 in bondparms.keys():
            bondparamsdict2[bondtyp2] = bondparms[bondtyp1]
          elif bondtyp1[::-1] in bondparms.keys():
            bondparamsdict2[bondtyp2] = bondparms[bondtyp1[::-1]]

    for i in bondparamsdict1.keys():
      print >> fmf, 'NON', i[0] + '-' + i[1] + bondparamsdict1[i]

    for i in bondparamsdict2.keys():
      print >> fmf, 'YES', i[0] + '-' + i[1] + bondparamsdict2[i]

    #--------------------------------------------------------------------------
    angparamsdict1 = {} #For metal ions
    angparamsdict2 = {} #For the others
    print >> fmf, ' '
    print >> fmf, 'ANGL'
    #for angle
    for angs in all_list.anglist:
      i = angs[0]
      j = angs[1]
      k = angs[2]
      if list(set(ionids) & set(angs)) != []:
        #The angles which related to the ions
        angtyp2 = (attypdict[i][1], attypdict[j][1], attypdict[k][1])
        if (angtyp2 not in angparamsdict1.keys()) and (angtyp2[::-1] \
            not in angparamsdict1.keys()):
          angparamsdict1[angtyp2] = ' '
        #print >> fmf, 'NON', attypdict[i][1] + '-' + attypdict[j][1] + \
        #'-' + attypdict[k][1]
      elif list(set(atidtrans) & set(angs)) != []:
        #The angles related to the atoms
        #which changed their atom types
        angtyp1 = (attypdict[i][0], attypdict[j][0], attypdict[k][0])
        angtyp2 = (attypdict[i][1], attypdict[j][1], attypdict[k][1])
        if (angtyp2 not in angparamsdict2.keys()) and (angtyp2[::-1] \
            not in angparamsdict2.keys()):
          if angtyp1 in angparms.keys():
            angparamsdict2[angtyp2] = angparms[angtyp1]
          elif angtyp1[::-1] in angparms.keys():
            angparamsdict2[angtyp2] = angparms[angtyp1[::-1]]

    for i in angparamsdict1.keys():
      print >> fmf, 'NON', i[0] + '-' + i[1] + '-' + i[2] + angparamsdict1[i]
    for i in angparamsdict2.keys():
      print >> fmf, 'YES', i[0] + '-' + i[1] + '-' + i[2] + angparamsdict2[i]

    #--------------------------------------------------------------------------
    dihparamsdict = {}

    #for dihedral
    for dihs in all_list.dihlist:
      i = dihs[0]
      j = dihs[1]
      k = dihs[2]
      l = dihs[3]
      if list(set(ionids) & set(dihs)) != []:
        #The dihedral related to the metal ions
        dihtyp1 = (attypdict[i][0], attypdict[j][0], attypdict[k][0], \
                   attypdict[l][0])
        dihtyp1n = (attypdict[i][1], attypdict[j][1], attypdict[k][1], \
                    attypdict[l][1])
        if (dihtyp1 not in dihparamsdict.keys()) and (dihtyp1[::-1] \
           not in dihparamsdict.keys()):
          dihparamsdict[dihtyp1n] = ['   3    0.00          0.0   ', \
                                     '          3.   ', ' ']
      elif list(set(atidtrans) & set(dihs)) != []:
        if list(set(atidtrans) & set(dihs[0::3])) == []:
        #Neither the 1st and 4th atom change atom types
        #There is 2nd or 3rd or both changed atom type(s)
          dihtyp1 = (attypdict[i][0], attypdict[j][0], attypdict[k][0], \
                     attypdict[l][0])
          dihtyp1n = (attypdict[i][1], attypdict[j][1], attypdict[k][1], \
                      attypdict[l][1])
          dihtyp2 = ('X ', attypdict[j][0], attypdict[k][0], 'X ')
          dihtyp2n = ('X ', attypdict[j][1], attypdict[k][1], 'X ')

          if dihtyp1 in dihparms.keys():
            if (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = dihparms[dihtyp1]
          elif dihtyp1[::-1] in dihparms.keys():
            if (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = dihparms[dihtyp1[::-1]]
          elif dihtyp2 in dihparms.keys():
            if (dihtyp2n not in dihparamsdict.keys()) and (dihtyp2n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp2n] = dihparms[dihtyp2]
          elif dihtyp2[::-1] in dihparms.keys():
            if (dihtyp2n not in dihparamsdict.keys()) and (dihtyp2n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp2n] = dihparms[dihtyp2[::-1]]
          else:
            if (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = ['   3    0.00          0.0   ', \
                                         '          3.   ', ' ']
        else:
        #There is 1st or 4th atoms or both changed the atom type(s)
          dihtyp1 = (attypdict[i][0], attypdict[j][0], attypdict[k][0], \
                     attypdict[l][0])
          dihtyp1n = (attypdict[i][1], attypdict[j][1], attypdict[k][1], \
                      attypdict[l][1])
          dihtyp2 = ('X ', attypdict[j][1], attypdict[k][1], 'X ')

          if dihtyp1 in dihparms.keys():
            if (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = dihparms[dihtyp1]
          elif dihtyp1[::-1] in dihparms.keys():
            if (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = dihparms[dihtyp1[::-1]]
          else:
            if (dihtyp2 in dihparms.keys()) or (dihtyp2[::-1] \
                in dihparms.keys()):
              continue
            elif (dihtyp1n not in dihparamsdict.keys()) and (dihtyp1n[::-1] \
                  not in dihparamsdict.keys()):
              dihparamsdict[dihtyp1n] = ['   3    0.00          0.0   ', \
                                         '          3.   ', ' ']

    print >> fmf, ' '
    print >> fmf, 'DIHE'
    for keyv in dihparamsdict.keys():
      if 'X ' not in keyv: #For types don't contain X
        valv = dihparamsdict[keyv]
        keyv = keyv[0] + '-' + keyv[1] + '-' + keyv[2] + '-' + keyv[3]
        temp = len(valv)/3
        for i in range(0, temp):
          temp1 = i * 3
          print >> fmf, 'YES', keyv, valv[temp1] + valv[temp1+1] + \
                   valv[temp1+2]

    for keyv in dihparamsdict.keys():
      if 'X ' in keyv:     #For types contain X
        valv = dihparamsdict[keyv]
        keyv = keyv[0] + '-' + keyv[1] + '-' + keyv[2] + '-' + keyv[3]
        temp = len(valv)/3
        for i in range(0, temp):
          temp1 = i * 3
          print >> fmf, 'YES', keyv, valv[temp1] + valv[temp1+1] + \
                   valv[temp1+2]
    #--------------------------------------------------------------------------
    impparamsdict = {}

    #For improper torsion
    for imps in all_list.implist:
      i = imps[0]
      j = imps[1]
      k = imps[2]
      l = imps[3]

      if list(set(ionids) & set(imps)) != []:
        continue
      elif list(set(atidtrans) & set(imps)) != []:
        imptyps = {}

        #1 situation
        imptyp1 = (attypdict[i][0], attypdict[j][0], attypdict[k][0], \
                   attypdict[l][0])
        imptyp1n = (attypdict[i][1], attypdict[j][1], attypdict[k][1], \
                    attypdict[l][1])

        #3 situations
        imptyp2 = ('X ', 'X ', attypdict[k][0], attypdict[i][0])
        imptyp2n = ('X ', 'X ', attypdict[k][1], attypdict[i][1])

        imptyp3 = ('X ', 'X ', attypdict[k][0], attypdict[j][0])
        imptyp3n = ('X ', 'X ', attypdict[k][1], attypdict[j][1])

        imptyp4 = ('X ', 'X ', attypdict[k][0], attypdict[l][0])
        imptyp4n = ('X ', 'X ', attypdict[k][1], attypdict[l][1])

        #6 situations
        imptyp5 = ('X ', attypdict[i][0], attypdict[k][0], attypdict[j][0])
        imptyp5n = ('X ', attypdict[i][1], attypdict[k][1], attypdict[j][1])

        imptyp6 = ('X ', attypdict[j][0], attypdict[k][0], attypdict[i][0])
        imptyp6n = ('X ', attypdict[j][1], attypdict[k][1], attypdict[i][1])

        imptyp7 = ('X ', attypdict[i][0], attypdict[k][0], attypdict[l][0])
        imptyp7n = ('X ', attypdict[i][0], attypdict[k][1], attypdict[l][1])

        imptyp8 = ('X ', attypdict[l][0], attypdict[k][0], attypdict[i][0])
        imptyp8n = ('X ', attypdict[l][1], attypdict[k][1], attypdict[i][1])

        imptyp9 = ('X ', attypdict[j][0], attypdict[k][0], attypdict[l][0])
        imptyp9n = ('X ', attypdict[j][1], attypdict[k][1], attypdict[l][1])

        imptyp10 = ('X ', attypdict[l][0], attypdict[k][0], attypdict[j][0])
        imptyp10n = ('X ', attypdict[l][1], attypdict[k][1], attypdict[j][1])

        imptyps[imptyp1] = imptyp1n
        imptyps[imptyp2] = imptyp2n
        imptyps[imptyp3] = imptyp3n
        imptyps[imptyp4] = imptyp4n
        imptyps[imptyp5] = imptyp5n
        imptyps[imptyp6] = imptyp6n
        imptyps[imptyp7] = imptyp7n
        imptyps[imptyp8] = imptyp8n
        imptyps[imptyp9] = imptyp9n
        imptyps[imptyp10] = imptyp10n

        for imptypkey in imptyps.keys():
          if imptypkey in impparms.keys():
            impparamsdict[imptyps[imptypkey]] = impparms[imptypkey]

    print >> fmf, ' '
    print >> fmf, 'IMPR'
    #for improper torsion
    for i in impparamsdict.keys():
      if i not in impparms.keys():
        imptypkey = i[0] + '-' + i[1] + '-' + i[2] + '-' + i[3]
        print >> fmf, 'YES', imptypkey, impparamsdict[i]
    #--------------------------------------------------------------------------
    #for nb
    print >> fmf, ' '
    print >> fmf, 'NONB'
    for atid in atidtrans: #For the others
      if atid not in ionids:
        attyp1 = attypdict[atid][0]
        attyp2 = attypdict[atid][1]
        print >> fmf, 'YES  ', attyp2 + nbparms[attyp1]

    IonLJParaDict = get_ionljparadict(watermodel)
    for i in ionids: #For metal ions
      element = mol.atoms[i].element
      chg = str(int(chargedict[mol.atoms[i].resname]))
      attyp2 = attypdict[i][1]
      rmin = IonLJParaDict[element + chg][0]
      ep = IonLJParaDict[element + chg][1]
      annot = IonLJParaDict[element + chg][2]
      print >> fmf, 'YES   %s    %11.3f  %13.10f       %-s' %(attyp2, rmin, \
               ep, annot)

    print >> fmf, ' '
    print >> fmf, ' '

    fmf.close()
    #--------------------------------------------------------------------------

    #Move the file, delete the repeat parts
    os.system("mv %s temp" %prefcdf)
    os.system("uniq temp > %s" %prefcdf)
    os.system("rm temp")


